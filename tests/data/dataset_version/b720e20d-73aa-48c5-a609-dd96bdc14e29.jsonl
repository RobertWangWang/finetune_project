{"instruction":"在页面维护成本方面，amis与Angular、Vue、React等框架相比有何优势？","input":"","output":"在页面维护成本方面，amis 相对 Angular、Vue、React 等框架具有显著优势。\n\n从技术更新影响角度看，Angular、Vue、React 等框架的版本更新频繁，以百度内部为例，6 年多前使用这些框架创建的页面，当年的版本如今大多已废弃，若继续维护，需投入大量精力进行版本升级和代码适配等工作。而 amis 基于 JSON 配置，百度内部最老的 amis 页面创建于 6 年多前，至今仍在使用，不受前端技术更新的影响，大大降低了因技术迭代带来的维护成本。\n\n从功能实现角度，Angular、Vue、React 等 UI 框架必须使用 JavaScript 来组装业务逻辑，当业务需求发生变化或出现问题时，维护人员需要具备 JavaScript 相关知识进行代码修改和调试，这对维护人员的技术要求较高。而 amis 只需 JSON 配置就能完成完整功能开发，包括数据获取、表单提交及验证等功能，即使维护人员不熟悉 JavaScript，也能通过修改 JSON 配置来维护页面，降低了维护的技术门槛和人力成本。\n\n从组件使用角度，其他 UI 框架大部分只有最通用的组件，遇到不常用组件需找第三方，且第三方组件在展现和交互上可能不一致，整合效果不佳，后续维护时可能因组件间的兼容性等问题耗费大量时间和精力。amis 则内置大量组件（120 +），包括富文本编辑器、代码编辑器等业务组件，绝大部分中后台页面开发只需要了解 amis 就足够，减少了因组件整合带来的维护成本。\n\n从可视化编辑器角度，一般前端可视化编辑器只能用来做静态原型，若要上线还需进行二次开发，增加了开发和维护成本。amis 可视化编辑器做出的页面可以直接上线，无需二次开发，在页面维护时也可直接通过可视化编辑器进行修改，提高了维护效率，降低了成本。 "}
{"instruction":"对于依赖原生DOM实现的复杂前端功能，amis与其他前端框架相比有何劣势？","input":"","output":"在依赖原生 DOM 实现的复杂前端功能方面，amis 与其他前端框架相比存在一定劣势。amis 基于 JSON 配置，对于这类功能存在局限性，例如可视化编辑器中有大量定制的拖拽操作，这种需要依赖原生 DOM 实现的功能无法使用 amis。而其他一些前端框架，由于可以使用 JavaScript 来组装业务逻辑，在处理这类极为复杂或特殊的交互时，相对更具灵活性，能够更好地利用原生 DOM 特性来实现相应功能。也就是说，在面对依赖原生 DOM 的复杂前端功能需求时，amis 不如部分其他前端框架那样适用，其他框架在这方面的实现能力更强。 "}
